autoplot(BoxCox(usgdp,0.3)) +
ggtitle("Quarterly US GDP (lambda = 0.3)") +
xlab("Quarter")
autoplot(BoxCox(usgdp,0.4)) +
ggtitle("Quarterly US GDP (lambda = 0.4)") +
xlab("Quarter")
qqnorm(usnetelec)
qqline(usnetelec)
qqnorm((usnetelec^0.5-1)/0.5)
qqline((usnetelec^0.5-1)/0.5)
qqnorm((usgdp^0.3-1)/0.3)
qqline((usgdp^0.3-1)/0.3)
qqnorm(usgdp)
qqline(usgdp)
qqnorm(mcopper)
qqline(mcopper)
qqline((mcopper^0.2-1)/0.2)
qqnorm((mcopper^0.2-1)/0.2)
qqline((mcopper^0.2-1)/0.2)
?enplanements
autoplot(enplanements) +
ggtitle("Monthly US domestic enplanements") +
xlab("Month")
autoplot(enplanements) +
ggtitle("Monthly US domestic enplanements") +
xlab("Month")
BoxCox.lambda(enplanements)
plot((enplanements^(-0.2)-1)/(-0.2))
autoplot(BoxCox(enplanements,-0.2))
autoplot(BoxCox(enplanements,-0.2))
autoplot(BoxCox(enplanements,-0.2)) +
ggtitle("Monthly US domestic enplanements (lambda = -0.2") +
xlab("Month")
autoplot(BoxCox(enplanements,-0.2)) +
ggtitle("Monthly US domestic enplanements (lambda = -0.2)") +
xlab("Month")
?cangas
autoplot(cangas) +
ggtitle("Monthly Canadian Gas Production") +
xlab("Month")
BoxCox.lambda(cangas)
autoplot(BoxCox(cangas,0.6)) +
ggtitle("Monthly US domestic enplanements (lambda = -0.2)") +
xlab("Month")
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
autoplot(goog200) +
xlab("Day") + ylab("closing prices(in $") +
ggtitle("Google Stock(daily ending 6 December 2013")
autoplot(residuals(naive(goog200))) +
xlab("Day") + ylab("") +
ggtitle("Residual from the Naive Method")
gghistogram(residuals(naive(goog200))) + ggtitle("Histogram of the residuals")
ggAcf(residuals(naive(goog200))) + ggtitle("ACF of residuals")
Box.test(residuals(naive(goog200)), lag = 10, fitdf = 0)
Box.test(residuals(naive(goog200)), lag = 10, fitdf = 0, type = "Lj")
checkresiduals(naive(goog200))
beer2 = window(ausbeer, start = 1992, end = c(2007,4))
beerfit1 = meanf(beer2, h = 10)
beerfit2 = rwf(beer2, h = 10)
beerfit3 = snaive(beer2, h = 10)
autoplot(window(ausbeer, start = 1992)) +
autolayer(beerfit1, series = "Mean", PI = FALSE) +
autolayer(beerfit2, series = "Naive", PI = FALSE) +
autolayer(beerfit3, series = "Seasonal Naive", PI = FALSE) +
ggtitle("Quarterly beer production data") +
xlab("Years") + ylab("Megalitres") +
guides(colour = guide_legend(title = "Forecast"))
beer3 = window(ausbeer, start = 2008)
accuracy(beerfit1, beer3)
accuracy(beerfit2, beer3)
accuracy(beerfit3, beer3)
googfc1 = meanf(goog200, h = 40)
googfc2 = rwf(goog200, h = 40)
googfc3 = rwf(goog200, drift = TRUE, h = 40)
autoplot(subset(goog, end = 240)) +
autolayer(googfc1, series = "Mean", PI = FALSE) +
autolayer(googfc2, series = "Naive", PI = FALSE) +
autolayer(googfc3, series = "Drift", PI = FALSE) +
ggtitle("Google Daily Stock Price Index") +
xlab("Day") + ylab("Closing Price(in $)") +
guides(colour = guide_legend(title = "Forecast"))
googtest = window(goog, start = 201, end = 240)
accuracy(googfc1, googtest)
accuracy(googfc2, googtest)
accuracy(googfc3, googtest)
e = tsCV(goog200, rwf, drift = TRUE, h = 1)
sqrt(mean(e^2, na.rm = TRUE))
sqrt(mean(residuals(rwf(goog200, drift = TRUE))^2, na.rm  = TRUE))
e = tsCV(goog200, forecastfunction = naive, h = 8)
mse = colMeans(e^2, na.rm = TRUE)
data.frame(h = 1:8, MSE = mse) %>%
ggplot(aes(x = h, y = MSE)) + geom_point()
beer <- window(ausbeer, start=1992)
fc <- snaive(beer)
autoplot(fc)
res <- residuals(fc)
autoplot(res)
checkresiduals(fc)
autoplot(WWWusage) +
ggtitle("Internet Usage per Minute") +
xlab("Minutes") + ylab("No. of Users")
fc = naive(WWWusage)
res = residuals(fc)
autoplot(res)
checkresiduals(fc)
autoplot(bricksq) +
ggtitle("Quarterly clay brick production") +
xlab("Quarter")
fc = snaive(bricksq)
res = residuals(fc)
autoplot(res)
checkresiduals(fc)
library(fpp2)
autoplot(goog200) +
xlab("Day") + ylab("closing prices(in $") +
ggtitle("Google Stock(daily ending 6 December 2013")
retaildata = readxl::read_excel("/Users/atyagi/Desktop/Time Series Forecasting/Time-Series-Forecasting/retail.xlsx",skip =1)
install.packages(readxl)
install.packages("readxl")
retaildata = readxl::read_excel("/Users/atyagi/Desktop/Time Series Forecasting/Time-Series-Forecasting/Time_series_data/retail.xlsx",skip =1)
myts = ts(retaildata[,"A3349873A"], start = c(1984,4), frequency = 12)
retaildata = readxl::read_excel("/Users/atyagi/Desktop/Time Series Forecasting/Time-Series-Forecasting/Time_series_data/retail.xlsx",skip =1)
myts = ts(retaildata[,"A3349873A"], start = c(1984,4), frequency = 12)
myts.train = window(myts, end = c(2010,12))
myts.test = window(myts, start = 2011)
autoplot(myts) +
autolayer(myts.train, series = "Train") +
autolayer(myts.test, series = "Test")
autoplot(myts) +
autolayer(myts.train, series = "Training") +
autolayer(myts.test, series = "Test")
fc = snaive(myts.train)
fc = snaive(myts.train)
accuracy(myts.train)
fc = snaive(myts.train)
accuracy(fc, myts.test)
checkresiduals(fc)
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
dframe = cbind(Monthly = milk,
DailyAverage = milk/monthdays(milk))
autoplot(dframe, facet = TRUE) +
xlab("Years") + ylab("Pounds") +
ggtitle("Milk Production per cow")
par(mfrow = c(3,2))
plot(log(elec), main = "Electricity Consumption US", ylab = "lambda = 0")
for (i in seq(0.1,0.5,0.1)){
plot((elec^i - 1)/i, main = "Electricity Consumption US", ylab = paste("lambda = ", i))
}
par(mfrow = c(3,2))
for (i in seq(0.6,1,0.1)){
plot((elec^i - 1)/i, main = "Electricity Consumption US", ylab = paste("lambda = ", i))
}
BoxCox.lambda(elec)
lambda = BoxCox.lambda(elec)
autoplot(BoxCox(elec, lambda))
fc = rwf(eggs, drift = TRUE, lambda = 0, h = 50, level = 80)
fc2 = rwf(eggs, drift = TRUE, lambda = 0.3, h = 50,level = 80, biasadj = TRUE)
autoplot(eggs) +
autolayer(fc, series = "Simple back transformation") +
autolayer(fc2, series = "Bias adjusted", PI = FALSE) +
guides(colour = guide_legend(title = "Forecast"))
autoplot(usnetelec) +
ggtitle("US net electricity generation") +
xlab("Year") + ylab("billion kwh")
BoxCox.lambda(usnetelec)
autoplot((usnetelec^0.5-1)/0.5) +
ggtitle("US net electricity generation (lambda = 0.5)") +
xlab("Year") + ylab("billion kwh")
autoplot((usnetelec^0.6-1)/0.6) +
ggtitle("US net electricity generation (lambda = 0.6)") +
xlab("Year") + ylab("billion kwh")
autoplot(usgdp) +
ggtitle("Quarterly US GDP") +
xlab("Quarter")
BoxCox.lambda(usgdp)
autoplot(BoxCox(usgdp,0.3)) +
ggtitle("Quarterly US GDP (lambda = 0.3)") +
xlab("Quarter")
autoplot(BoxCox(usgdp,0.4)) +
ggtitle("Quarterly US GDP (lambda = 0.4)") +
xlab("Quarter")
autoplot(mcopper) +
ggtitle("Monthly copper prices") +
xlab("Month")
BoxCox.lambda(mcopper)
autoplot(BoxCox(mcopper,0.2)) +
ggtitle("Monthly copper prices (lambda = 0.2)") +
xlab("Month")
autoplot(BoxCox(mcopper,0.3)) +
ggtitle("Monthly copper prices (lambda = 0.3)") +
xlab("Month")
autoplot(enplanements) +
ggtitle("Monthly US domestic enplanements") +
xlab("Month")
BoxCox.lambda(enplanements)
autoplot(BoxCox(enplanements,-0.2)) +
ggtitle("Monthly US domestic enplanements (lambda = -0.2)") +
xlab("Month")
autoplot(cangas) +
ggtitle("Monthly Canadian Gas Production") +
xlab("Month")
BoxCox.lambda(cangas)
autoplot(BoxCox(cangas,0.6)) +
ggtitle("Monthly US domestic enplanements (lambda = -0.2)") +
xlab("Month")
retaildata = readxl::read_excel("/Users/ankittyagi/Desktop/Time Series Forecasting/Time-Series-Forecasting/Time_series_data/retail.xlsx",skip =1)
visnights
?visnights
autoplot(visnights)
autoplot(visnights[,"QLDMetro"])
train1= window(visnights[,"QLDMetro"], end = c(2015,4))
train2= window(visnights[,"QLDMetro"], end = c(2014,4))
train3= window(visnights[,"QLDMetro"], end = c(2013,4))
train1= window(visnights[,"QLDMetro"], end = c(2015,4))
train2= window(visnights[,"QLDMetro"], end = c(2014,4))
train3= window(visnights[,"QLDMetro"], end = c(2013,4))
fc1 = snaive(train1)
fc2 = snaive(train2)
fc3 = snaive(train3)
train1= window(visnights[,"QLDMetro"], end = c(2015,4))
train2= window(visnights[,"QLDMetro"], end = c(2014,4))
train3= window(visnights[,"QLDMetro"], end = c(2013,4))
fc1 = snaive(train1)
accuracy(fc1,window(visnights[,"QLDMetro"], start = 2016, end = (2016,4)))
train1= window(visnights[,"QLDMetro"], end = c(2015,4))
train2= window(visnights[,"QLDMetro"], end = c(2014,4))
train3= window(visnights[,"QLDMetro"], end = c(2013,4))
fc1 = snaive(train1)
accuracy(fc1,window(visnights[,"QLDMetro"], start = 2016, end = c(2016,4)))
fc2 = snaive(train2)
accuracy(fc2,window(visnights[,"QLDMetro"], start = 2015, end = c(2015,4)))
fc3 = snaive(train3)
accuracy(fc3,window(visnights[,"QLDMetro"], start = 2014, end = c(2014,4)))
autoplot(dowjones)
autoplot(dowjones) +
autolayer(rwf(dowjones, drift = TRUE))
autoplot(dowjones) +
autolayer(rwf(dowjones, drift = TRUE, h = 10))
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
beer2 = window(ausbeer, start = 1992, end = c(2007,4))
autoplot(beer2) +
autolayer(meanf(beer2, h = 11),
series = "Mean", PI = FALSE) +
autolayer(naive(beer2, h = 11),
series = "Naive", PI = FALSE) +
autolayer(snaive(beer2, h = 11),
series = "Seasonal Naive", PI = FALSE) +
ggtitle("Forecast for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour = guide_legend(title = "Forecast"))
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
beer2 = window(ausbeer, start = 1992, end = c(2007,4))
autoplot(beer2) +
autolayer(meanf(beer2, h = 11),
series = "Mean", PI = FALSE) +
autolayer(naive(beer2, h = 11),
series = "Naive", PI = FALSE) +
autolayer(snaive(beer2, h = 11),
series = "Seasonal Naive", PI = FALSE) +
ggtitle("Forecast for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour = guide_legend(title = "Forecast"))
autoplot(goog200) +
autolayer(meanf(goog200, h = 40),
series = "Mean", PI = FALSE) +
autolayer(naive(goog200, h = 40),
series = "Naive", PI = FALSE) +
autolayer(rwf(goog200, drift = TRUE,  h = 40),
series = "Drift", PI = FALSE) +
ggtitle("Google Stock (daily ending)") +
xlab("Day") + ylab("Closing Price (US$)") +
guides(colour = guide_legend(title = "Forecast"))
autoplot(dowjones) +
autolayer(rwf(dowjones, drift = TRUE, h = 10))
lm_dj = lm(c(dowjones[1],dowjones[78]) ~ c(1,78))
autoplot(dowjones) +
autolayer(rwf(dowjones, drift = TRUE, h = 10)) +
geom_abline(intercept = lm_dj$coefficients[1],
slope = lm_dj$coefficients[2],
color = "red")
lm_dj = lm(c(dowjones[1],dowjones[78]) ~ c(1,78))
autoplot(dowjones) +
geom_abline(intercept = lm_dj$coefficients[1],
slope = lm_dj$coefficients[2],
color = "red")
lm_dj = lm(c(dowjones[1],dowjones[78]) ~ c(1,78))
autoplot(dowjones) +
geom_abline(intercept = lm_dj$coefficients[1],
slope = lm_dj$coefficients[2],
color = "red") +
autolayer(rwf(dowjones, drift = TRUE, h = 10))
autoplot(dowjones) +
autolayer(rwf(dowjones, drift = TRUE, h = 10), PI = FALSE, series = "Drift") +
autolayer(rwf(dowjones, h = 10), PI = FALSE, series = "Naive") +
autolayer(mean(dowjones, h = 10), PI = FALSE, series = "Mean")
autoplot(dowjones) +
autolayer(rwf(dowjones, drift = TRUE, h = 10), PI = FALSE, series = "Drift") +
autolayer(naive(dowjones, h = 10), PI = FALSE, series = "Naive") +
autolayer(mean(dowjones, h = 10), PI = FALSE, series = "Mean")
autoplot(dowjones) +
autolayer(rwf(dowjones, drift = TRUE, h = 10), PI = FALSE, series = "Drift")
autoplot(dowjones) +
autolayer(rwf(dowjones, drift = TRUE, h = 10), PI = FALSE, series = "Drift") +
autolayer(naive(dowjones, h = 10), PI = FALSE, series = "Naive")
autoplot(dowjones) +
autolayer(rwf(dowjones, drift = TRUE, h = 10), PI = FALSE, series = "Drift") +
autolayer(naive(dowjones, h = 10), PI = FALSE, series = "Naive") +
autolayer(meanf(dowjones, h = 10), PI = FALSE, series = "Mean")
autoplot(dowjones) +
autolayer(rwf(dowjones, drift = TRUE, h = 10), series = "Drift") +
autolayer(naive(dowjones, h = 10), PI = FALSE, series = "Naive") +
autolayer(meanf(dowjones, h = 10), PI = FALSE, series = "Mean")
autoplot(ibmclose)
autoplot(ibmclose) +
ggtitle("IBM Stock Prices")
?ibmclose
autoplot(ibmclose) +
ggtitle("IBM Stock Prices") +
ylab("Stock Price")
train_ibm = window(ibmclose, end = 300)
test_ibm = window(ibmclose, start = 301)
train_ibm = window(ibmclose, end = 300)
test_ibm = window(ibmclose, start = 301)
fc1 = meanf(train_ibm)
fc2 = naive(train_ibm)
fc3 = rwf(train_ibm, drift = TRUE)
train_ibm = window(ibmclose, end = 300)
test_ibm = window(ibmclose, start = 301)
fc1 = meanf(train_ibm)
fc2 = naive(train_ibm)
fc3 = rwf(train_ibm, drift = TRUE)
accuracy(fc1, test_ibm)
accuracy(fc2, test_ibm)
accuracy(fc3, test_ibm)
train_ibm = window(ibmclose, end = 300)
test_ibm = window(ibmclose, start = 301)
fc1 = meanf(train_ibm)
fc2 = naive(train_ibm)
fc3 = rwf(train_ibm, drift = TRUE)
accuracy(fc1, test_ibm)
accuracy(fc2, test_ibm)
accuracy(fc3, test_ibm)
checkresiduals(fc2)
train_ibm = window(ibmclose, end = 300)
test_ibm = window(ibmclose, start = 301)
fc1 = meanf(train_ibm)
fc2 = naive(train_ibm)
fc3 = rwf(train_ibm, drift = TRUE)
fc4 = snaive(train_ibm)
accuracy(fc1, test_ibm)
accuracy(fc2, test_ibm)
accuracy(fc3, test_ibm)
accuracy(fc4, test_ibm)
checkresiduals(fc4)
?hsales
autoplot(hsales) +
ggtitle("Sales of one-family houses")
tail(hsales)
train_ibm = window(hsales, end = 1993)
test_ibm = window(hsales, start = 1994)
fc1 = meanf(train_ibm)
fc2 = naive(train_ibm)
fc2 = snaive(train_ibm)
accuracy(fc1, test_ibm)
train_ibm = window(hsales, end = 1993)
test_ibm = window(hsales, start = 1994)
fc1 = meanf(train_ibm)
fc2 = naive(train_ibm)
fc3 = snaive(train_ibm)
accuracy(fc1, test_ibm)
train_hsales = window(hsales, end = 1993)
test_hsales = window(hsales, start = 1994)
fc1 = meanf(train_hsales)
fc2 = naive(train_hsales)
fc3 = snaive(train_hsales)
accuracy(fc1, test_hsales)
train_hsales = window(hsales, end = c(1993,12))
test_hsales = window(hsales, start = 1994)
fc1 = meanf(train_hsales)
fc2 = naive(train_hsales)
fc3 = snaive(train_hsales)
accuracy(fc1, test_hsales)
accuracy(fc2, test_hsales)
accuracy(fc3, test_hsales)
train_ibm = window(ibmclose, end = 300)
test_ibm = window(ibmclose, start = 301)
fc1 = meanf(train_ibm)
fc2 = naive(train_ibm)
fc3 = rwf(train_ibm, drift = TRUE)
accuracy(fc1, test_ibm)
accuracy(fc2, test_ibm)
accuracy(fc3, test_ibm)
checkresiduals(fc4)
autoplot(hsales) +
ggtitle("Sales of one-family houses")
train_hsales = window(hsales, end = c(1993,12))
test_hsales = window(hsales, start = 1994)
fc1 = meanf(train_hsales)
fc2 = naive(train_hsales)
fc3 = snaive(train_hsales)
accuracy(fc1, test_hsales)
accuracy(fc2, test_hsales)
accuracy(fc3, test_hsales)
checkresiduals(fc3)
checkresiduals(fc2)
data(mcars)
data(mtcars)
head(mtcars)
install.packages(GGally)
install.packages("GGally")
library(GGally)
GGally(mtcars)
?ggally
??ggally
GGally::ggpairs(mtcars)
knitr::opts_chunk$set(echo = TRUE)
plot(mtcars$drat, mtcars$mpg)
plot(mtcars$drat, mtcars$mpg)
abline(lm(mtcars$mpg~mtcars$drat))
lm(mtcars$mpg~mtcars$drat)
summary(mtcars$mpg)
summary(mtcars$drat)
summary(mtcars$disp)
plot(mtcars$drat, mtcars$mpg)
abline(lm(mtcars$mpg~(mtcars$drat-min(mtcars$drat)))
plot(mtcars$drat, mtcars$mpg)
abline(lm(mtcars$mpg~(mtcars$drat-min(mtcars$drat))))
min(mtcars$drat)
plot(mtcars$drat, mtcars$mpg)
drat_cen_2.76 = mtcars$drat - 2.76
abline(lm(mtcars$mpg~mtcars$drat))
plot(mtcars$drat, mtcars$mpg)
drat_cen_2.76 = mtcars$drat - 2.76
abline(lm(mtcars$mpg~drat_cen_2.76))
plot(mtcars$drat, mtcars$mpg)
drat_cen_2.76 = mtcars$drat - 2.76
abline(lm(mtcars$mpg~drat_cen_2.76))
drat_cen_2.76 = mtcars$drat - 2.76
plot(drat_cen_2.76, mtcars$mpg)
abline(lm(mtcars$mpg~drat_cen_2.76))
lm(mtcars$mpg~drat_cen_2.76)
autoplot(uschange[,c("Consumption","Income")]) +
ylab("% Change") + xlab("Year")
autoplot(uschange[,c("Consumption","Income")]) +
ylab("% Change") + xlab("Year")
uschange %>%
as.data.frame() %>%
ggplot(aes(x = Income, y = Consumption)) +
ylab("Consumption") +
xlab("Income") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
tslm(Consumption ~ Income, data = uschange)
knitr::opts_chunk$set(echo = TRUE)
drat_cen_2.76 = mtcars$drat - 2.76 # we are centering the variable so that we can have a zero on the x-axis.
plot(drat_cen_2.76, mtcars$mpg)
abline(lm(mtcars$mpg~drat_cen_2.76))
library(fpp2)
autoplot(uschange[,c("Consumption","Income")]) +
ylab("% Change") + xlab("Year")
uschange %>%
as.data.frame() %>%
ggplot(aes(x = Income, y = Consumption)) +
ylab("Consumption") +
xlab("Income") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
tslm(Consumption ~ Income, data = uschange)
autoplot(uschange[,c("Production","Savings","Unemployment")], facets = TRUE) +
ylab("% Change")
uschange %>%
as.data.frame() %>%
GGally::ggpairs()
fit_cons = tslm(Consumption ~ Income + Production + Unemployment + Savings, data = uschange)
summary(fit_cons)
autoplot(uschange[,"Consumption"],series = "Data") +
autolayer(fitted(fit_cons), series = "Fitted") +
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour = guide_legend(title = " "))
cbind(Data = uschange[,"Consumption"],Fitted = fitted(fit_cons)) %>%
as.data.frame() %>%
ggplot(aes(x = Data, y = Fitted)) +
geom_point() +
xlab("Data (Actual Values)") +
ylab("Fitted (predicted values)") +
ggtitle("Percentage change in US Consumption expenditure") +
geom_abline(intercept = 0, slope = 1)
checkresiduals(fit_cons)
library(gridExtra)
install.packages(gridExtra)
install.packages("gridExtra")
library(gridExtra)
df = as.data.frame(uschange)
df[,"residuals"] = as.numeric(residuals(fit_cons))
p1 = ggplot(df, aes(x = Income, y = residuals)) +
geom_point()
p2 = ggplot(df, aes(x = Savings, y = residuals)) +
geom_point()
p3 = ggplot(df, aes(x = Production, y = residuals)) +
geom_point()
p4 = ggplot(df, aes(x = Unemployment, y = residuals)) +
geom_point()
gridExtra::grid.arrange(p1, p2, p3, p4, nrow = 2)
cbind(Fitted = fitted(fit_cons),Residuals = residuals(fit_cons)) %>%
as.data.frame() %>%
ggplot(aes(x=Fitted, y= Residuals)) +
geom_point()
