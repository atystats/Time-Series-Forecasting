#autolayer(fcasts.pw, series = "Piecewise", PI = FALSE) +
#autolayer(fcasts.spline, series = "Cubic Spline", PI = FALSE) +
ggtitle("Boston Marathon winning time since 1897") +
xlab("Years") + ylab("time(in minutes)") +
guides(colour = guide_legend(title = ""))
h = 10
fit.lin = tslm(marathon ~ trend)
fcasts.lin = forecast(fit.lin, h = h)
fit.exp = tslm(marathon ~ trend, lambda = 0)
fcasts.exp = tslm(fit.exp, h = h)
t = time(marathon)
t.knot1 = 1940
t.knot2 = 1980
tb1 = ts(pmax(0,t - t.knot1), start = 1897)
tb2 = ts(pmax(0,t - t.knot2), start = 1897)
fit.pw = tslm(marathon ~ t + tb1 + tb2)
fit.spline = tslm(marathon ~ t + I(t^2) + I(t^3) + I(tb1^3) + I(tb2^3))
t.new = t[length(h)] + seq(h)
tb1.new = tb1[length(tb1)] + seq(h)
tb2.new = tb2[length(tb2)] + seq(h)
new_data = cbind(t = t.new, tb1 = tb1.new, tb2 = tb2.new) %>%
as.data.frame()
fcasts.pw = forecast(fit.pw, newdata = new_data)
fcasts.spline = forecast(fit.spline, newdata = new_data)
autoplot(marathon) +
autolayer(fitted(fit.lin), series = "Linear") +
autolayer(fitted(fit.exp), series = "Exponential") +
autolayer(fitted(fit.pw), series = "Piecewise") +
autolayer(fitted(fit.spline), series = "Cubic Spline") +
autolayer(fcasts.lin, series = "Linear", PI = FALSE) +
#autolayer(fcasts.exp, series = "Exponential", PI = FALSE) +
autolayer(fcasts.pw, series = "Piecewise", PI = FALSE) +
#autolayer(fcasts.spline, series = "Cubic Spline", PI = FALSE) +
ggtitle("Boston Marathon winning time since 1897") +
xlab("Years") + ylab("time(in minutes)") +
guides(colour = guide_legend(title = ""))
h = 10
fit.lin = tslm(marathon ~ trend)
fcasts.lin = forecast(fit.lin, h = h)
fit.exp = tslm(marathon ~ trend, lambda = 0)
fcasts.exp = tslm(fit.exp, h = h)
t = time(marathon)
t.knot1 = 1940
t.knot2 = 1980
tb1 = ts(pmax(0,t - t.knot1), start = 1897)
tb2 = ts(pmax(0,t - t.knot2), start = 1897)
fit.pw = tslm(marathon ~ t + tb1 + tb2)
fit.spline = tslm(marathon ~ t + I(t^2) + I(t^3) + I(tb1^3) + I(tb2^3))
t.new = t[length(h)] + seq(h)
tb1.new = tb1[length(tb1)] + seq(h)
tb2.new = tb2[length(tb2)] + seq(h)
new_data = cbind(t = t.new, tb1 = tb1.new, tb2 = tb2.new) %>%
as.data.frame()
fcasts.pw = forecast(fit.pw, newdata = new_data)
fcasts.spline = forecast(fit.spline, newdata = new_data)
autoplot(marathon) +
autolayer(fitted(fit.lin), series = "Linear") +
autolayer(fitted(fit.exp), series = "Exponential") +
autolayer(fitted(fit.pw), series = "Piecewise") +
autolayer(fitted(fit.spline), series = "Cubic Spline") +
autolayer(fcasts.lin, series = "Linear", PI = FALSE) +
#autolayer(fcasts.exp, series = "Exponential", PI = FALSE) +
autolayer(fcasts.pw, series = "Piecewise", PI = FALSE) +
autolayer(fcasts.spline, series = "Cubic Spline", PI = FALSE) +
ggtitle("Boston Marathon winning time since 1897") +
xlab("Years") + ylab("time(in minutes)") +
guides(colour = guide_legend(title = ""))
h = 10
fit.lin = tslm(marathon ~ trend)
fcasts.lin = forecast(fit.lin, h = h)
fit.exp = tslm(marathon ~ trend, lambda = 0)
fcasts.exp = tslm(fit.exp, h = h)
t = time(marathon)
t.knot1 = 1940
t.knot2 = 1980
tb1 = ts(pmax(0,t - t.knot1), start = 1897)
tb2 = ts(pmax(0,t - t.knot2), start = 1897)
fit.pw = tslm(marathon ~ t + tb1 + tb2)
fit.spline = tslm(marathon ~ t + I(t^2) + I(t^3) + I(tb1^3) + I(tb2^3))
t.new = t[length(h)] + seq(h)
tb1.new = tb1[length(tb1)] + seq(h)
tb2.new = tb2[length(tb2)] + seq(h)
new_data = cbind(t = t.new, tb1 = tb1.new, tb2 = tb2.new) %>%
as.data.frame()
fcasts.pw = forecast(fit.pw, newdata = new_data)
fcasts.spline = forecast(fit.spline, newdata = new_data)
autoplot(marathon) +
autolayer(fitted(fit.lin), series = "Linear") +
autolayer(fitted(fit.exp), series = "Exponential") +
autolayer(fitted(fit.pw), series = "Piecewise") +
autolayer(fitted(fit.spline), series = "Cubic Spline") +
autolayer(fcasts.lin, series = "Linear", PI = FALSE) +
autolayer(fcasts.exp, series = "Exponential", PI = FALSE) +
autolayer(fcasts.pw, series = "Piecewise", PI = FALSE) +
autolayer(fcasts.spline, series = "Cubic Spline", PI = FALSE) +
ggtitle("Boston Marathon winning time since 1897") +
xlab("Years") + ylab("time(in minutes)") +
guides(colour = guide_legend(title = ""))
h = 10
fit.lin = tslm(marathon ~ trend)
fcasts.lin = forecast(fit.lin, h = h)
fit.exp = tslm(marathon ~ trend, lambda = 0)
fcasts.exp = forecast(fit.exp, h = h)
t = time(marathon)
t.knot1 = 1940
t.knot2 = 1980
tb1 = ts(pmax(0,t - t.knot1), start = 1897)
tb2 = ts(pmax(0,t - t.knot2), start = 1897)
fit.pw = tslm(marathon ~ t + tb1 + tb2)
fit.spline = tslm(marathon ~ t + I(t^2) + I(t^3) + I(tb1^3) + I(tb2^3))
t.new = t[length(h)] + seq(h)
tb1.new = tb1[length(tb1)] + seq(h)
tb2.new = tb2[length(tb2)] + seq(h)
new_data = cbind(t = t.new, tb1 = tb1.new, tb2 = tb2.new) %>%
as.data.frame()
fcasts.pw = forecast(fit.pw, newdata = new_data)
fcasts.spline = forecast(fit.spline, newdata = new_data)
autoplot(marathon) +
autolayer(fitted(fit.lin), series = "Linear") +
autolayer(fitted(fit.exp), series = "Exponential") +
autolayer(fitted(fit.pw), series = "Piecewise") +
autolayer(fitted(fit.spline), series = "Cubic Spline") +
autolayer(fcasts.lin, series = "Linear", PI = FALSE) +
autolayer(fcasts.exp, series = "Exponential", PI = FALSE) +
autolayer(fcasts.pw, series = "Piecewise", PI = FALSE) +
autolayer(fcasts.spline, series = "Cubic Spline", PI = FALSE) +
ggtitle("Boston Marathon winning time since 1897") +
xlab("Years") + ylab("time(in minutes)") +
guides(colour = guide_legend(title = ""))
h = 10
fit.lin = tslm(marathon ~ trend)
fcasts.lin = forecast(fit.lin, h = h)
fit.exp = tslm(marathon ~ trend, lambda = 0)
fcasts.exp = forecast(fit.exp, h = h)
t = time(marathon)
t.knot1 = 1940
t.knot2 = 1980
tb1 = ts(pmax(0,t - t.knot1), start = 1897)
tb2 = ts(pmax(0,t - t.knot2), start = 1897)
fit.pw = tslm(marathon ~ t + tb1 + tb2)
fit.spline = tslm(marathon ~ t + I(t^2) + I(t^3) + I(tb1^3) + I(tb2^3))
t.new = t[length(h)] + seq(h)
tb1.new = tb1[length(tb1)] + seq(h)
tb2.new = tb2[length(tb2)] + seq(h)
new_data = cbind(t = t.new, tb1 = tb1.new, tb2 = tb2.new) %>%
as.data.frame()
fcasts.pw = forecast(fit.pw, newdata = new_data)
fcasts.spline = forecast(fit.spline, newdata = new_data)
autoplot(marathon) +
autolayer(fitted(fit.lin), series = "Linear") +
autolayer(fitted(fit.exp), series = "Exponential") +
autolayer(fitted(fit.pw), series = "Piecewise") +
autolayer(fitted(fit.spline), series = "Cubic Spline") +
autolayer(fcasts.lin, series = "Linear", PI = FALSE) +
autolayer(fcasts.exp, series = "Exponential", PI = FALSE) +
autolayer(fcasts.pw, series = "Piecewise", PI = FALSE) +
#autolayer(fcasts.spline, series = "Cubic Spline", PI = FALSE) +
ggtitle("Boston Marathon winning time since 1897") +
xlab("Years") + ylab("time(in minutes)") +
guides(colour = guide_legend(title = ""))
tb1
tb1.new
tb2.new
tb2
h = 10
fit.lin = tslm(marathon ~ trend)
fcasts.lin = forecast(fit.lin, h = h)
fit.exp = tslm(marathon ~ trend, lambda = 0)
fcasts.exp = forecast(fit.exp, h = h)
t = time(marathon)
t.knot1 = 1940
t.knot2 = 1980
tb1 = ts(pmax(0,t - t.knot1), start = 1897)
tb2 = ts(pmax(0,t - t.knot2), start = 1897)
fit.pw = tslm(marathon ~ t + tb1 + tb2)
fit.spline = tslm(marathon ~ t + I(t^2) + I(t^3) + I(tb1^3) + I(tb2^3))
t.new = t[length(t)] + seq(h)
tb1.new = tb1[length(tb1)] + seq(h)
tb2.new = tb2[length(tb2)] + seq(h)
new_data = cbind(t = t.new, tb1 = tb1.new, tb2 = tb2.new) %>%
as.data.frame()
fcasts.pw = forecast(fit.pw, newdata = new_data)
fcasts.spline = forecast(fit.spline, newdata = new_data)
autoplot(marathon) +
autolayer(fitted(fit.lin), series = "Linear") +
autolayer(fitted(fit.exp), series = "Exponential") +
autolayer(fitted(fit.pw), series = "Piecewise") +
autolayer(fitted(fit.spline), series = "Cubic Spline") +
autolayer(fcasts.lin, series = "Linear", PI = FALSE) +
autolayer(fcasts.exp, series = "Exponential", PI = FALSE) +
autolayer(fcasts.pw, series = "Piecewise", PI = FALSE) +
autolayer(fcasts.spline, series = "Cubic Spline", PI = FALSE) +
ggtitle("Boston Marathon winning time since 1897") +
xlab("Years") + ylab("time(in minutes)") +
guides(colour = guide_legend(title = ""))
h = 10
fit.lin = tslm(marathon ~ trend)
fcasts.lin = forecast(fit.lin, h = h)
fit.exp = tslm(marathon ~ trend, lambda = 0)
fcasts.exp = forecast(fit.exp, h = h)
t = time(marathon)
t.knot1 = 1940
t.knot2 = 1980
tb1 = ts(pmax(0,t - t.knot1), start = 1897)
tb2 = ts(pmax(0,t - t.knot2), start = 1897)
fit.pw = tslm(marathon ~ t + tb1 + tb2)
fit.spline = tslm(marathon ~ t + I(t^2) + I(t^3) + I(tb1^3) + I(tb2^3))
t.new = t[length(t)] + seq(h)
tb1.new = tb1[length(tb1)] + seq(h)
tb2.new = tb2[length(tb2)] + seq(h)
new_data = cbind(t = t.new, tb1 = tb1.new, tb2 = tb2.new) %>%
as.data.frame()
fcasts.pw = forecast(fit.pw, newdata = new_data)
fcasts.spline = forecast(fit.spline, newdata = new_data)
autoplot(marathon) +
autolayer(fitted(fit.lin), series = "Linear") +
autolayer(fitted(fit.exp), series = "Exponential") +
autolayer(fitted(fit.pw), series = "Piecewise") +
autolayer(fitted(fit.spline), series = "Cubic Spline") +
autolayer(fcasts.lin, series = "Linear", PI = FALSE) +
autolayer(fcasts.exp, series = "Exponential", PI = FALSE) +
autolayer(fcasts.pw, series = "Piecewise") +
autolayer(fcasts.spline, series = "Cubic Spline", PI = FALSE) +
ggtitle("Boston Marathon winning time since 1897") +
xlab("Years") + ylab("time(in minutes)") +
guides(colour = guide_legend(title = ""))
h = 10
fit.lin = tslm(marathon ~ trend)
fcasts.lin = forecast(fit.lin, h = h)
fit.exp = tslm(marathon ~ trend, lambda = 0)
fcasts.exp = forecast(fit.exp, h = h)
t = time(marathon)
t.knot1 = 1940
t.knot2 = 1980
tb1 = ts(pmax(0,t - t.knot1), start = 1897)
tb2 = ts(pmax(0,t - t.knot2), start = 1897)
fit.pw = tslm(marathon ~ t + tb1 + tb2)
fit.spline = tslm(marathon ~ t + I(t^2) + I(t^3) + I(tb1^3) + I(tb2^3))
t.new = t[length(t)] + seq(h)
tb1.new = tb1[length(tb1)] + seq(h)
tb2.new = tb2[length(tb2)] + seq(h)
new_data = cbind(t = t.new, tb1 = tb1.new, tb2 = tb2.new) %>%
as.data.frame()
fcasts.pw = forecast(fit.pw, newdata = new_data)
fcasts.spline = forecast(fit.spline, newdata = new_data)
autoplot(marathon) +
autolayer(fitted(fit.lin), series = "Linear") +
autolayer(fitted(fit.exp), series = "Exponential") +
autolayer(fitted(fit.pw), series = "Piecewise") +
autolayer(fitted(fit.spline), series = "Cubic Spline") +
autolayer(fcasts.lin, series = "Linear", PI = FALSE) +
autolayer(fcasts.exp, series = "Exponential", PI = FALSE) +
autolayer(fcasts.pw, series = "Piecewise") +
autolayer(fcasts.spline, series = "Cubic Spline", PI = FALSE) +
ggtitle("Boston Marathon winning time since 1897") +
xlab("Years") + ylab("time(in minutes)") +
guides(colour = guide_legend(title = ""))
h = 10
fit.lin = tslm(marathon ~ trend)
fcasts.lin = forecast(fit.lin, h = h)
fit.exp = tslm(marathon ~ trend, lambda = 0)
fcasts.exp = forecast(fit.exp, h = h)
t = time(marathon)
t.knot1 = 1940
t.knot2 = 1980
tb1 = ts(pmax(0,t - t.knot1), start = 1897)
tb2 = ts(pmax(0,t - t.knot2), start = 1897)
fit.pw = tslm(marathon ~ t + tb1 + tb2)
fit.spline = tslm(marathon ~ t + I(t^2) + I(t^3) + I(tb1^3) + I(tb2^3))
t.new = t[length(t)] + seq(h)
tb1.new = tb1[length(tb1)] + seq(h)
tb2.new = tb2[length(tb2)] + seq(h)
new_data = cbind(t = t.new, tb1 = tb1.new, tb2 = tb2.new) %>%
as.data.frame()
fcasts.pw = forecast(fit.pw, newdata = new_data)
fcasts.spline = forecast(fit.spline, newdata = new_data)
autoplot(marathon) +
autolayer(fitted(fit.lin), series = "Linear") +
autolayer(fitted(fit.exp), series = "Exponential") +
autolayer(fitted(fit.pw), series = "Piecewise") +
autolayer(fitted(fit.spline), series = "Cubic Spline") +
autolayer(fcasts.pw, series = "Piecewise") +
autolayer(fcasts.lin, series = "Linear", PI = FALSE) +
autolayer(fcasts.exp, series = "Exponential", PI = FALSE) +
autolayer(fcasts.spline, series = "Cubic Spline", PI = FALSE) +
ggtitle("Boston Marathon winning time since 1897") +
xlab("Years") + ylab("time(in minutes)") +
guides(colour = guide_legend(title = ""))
marathon %>%
splinef() %>%
autoplot()
marathon %>%
splinef() %>%
autoplot()
marathon %>%
splinef() %>%
checkresiduals()
library(fpp2)
autoplot(marathon) +
ggtitle("Boston Marathon winning time since 1897") +
xlab("Years") + ylab("time(in minutes)")
?mens400
autoplot(mens400)
autoplot(mens400) +
xlab("Year") + ylab("Time(in minutes)")
tslm(mens400 ~ trend)
fit.mens = tslm(mens400 ~ trend)
summary(fit.mens)
fit.mens = tslm(mens400 ~ trend)
summary(fit.mens, na.rm = TRUE)
fit.mens = tslm(mens400 ~ trend)
checkresiduals(tslm(mens400 ~ trend))
tslm(mens400 ~ trend)
fit.mens = tslm(mens400 ~ trend)
fit.mens = tslm(mens400 ~ trend)
forecast(fit.mens, h = 4)
easter(ausbeer)
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
beer2 = window(ausbeer, start = 1992)
autoplot(beer2) +
xlab("Year") + ylab("Megalitres")
fit.beer = tslm(beer2 ~ trend + season)
summary(fit.beer)
autoplot(beer2, series = "Data") +
autolayer(fitted(fit.beer), series = "Fitted") +
xlab("Year") + ylab("Megalitres") +
ggtitle("Quarterly Beer Production")
cbind(Data = beer2, Fitted = fitted(fit.beer)) %>%
as.data.frame() %>%
ggplot(aes(x = Data, y = Fitted, colour = as.factor(cycle(beer2)))) +
geom_point() +
ylab("Fitted") + xlab("Actual Values") +
ggtitle("Quarterly Beer Production") +
scale_color_brewer(palette = "Dark2", name = "Quarter") +
geom_abline(slope = 1, intercept = 0)
fourier.beer = tslm(beer2 ~ trend + fourier(beer2, K = 2)) #K = m/2, m = seasonal period
summary(fourier.beer)
beer2 <- window(ausbeer, start=1992)
fit.beer <- tslm(beer2 ~ trend + season)
fcast <- forecast(fit.beer)
autoplot(fcast) +
ggtitle("Forecasts of beer production using regression") +
xlab("Year") + ylab("megalitres")
fit.consBest = tslm(Consumption ~ Savings + Income + Unemployment,
data = uschange)
h = 4
newdata = data.frame(
Income = c(1,1,1,1),
Savings = c(0.5,0.5,0.5,0.5),
Unemployment = c(0,0,0,0))
fcast.up = forecast(fit.consBest, newdata)
newdata <- data.frame(
Income = rep(-1, h),
Savings = rep(-0.5, h),
Unemployment = rep(0, h))
fcast.down <- forecast(fit.consBest, newdata = newdata)
autoplot(uschange[,1]) +
ylab("%change in US Consumption") +
autolayer(fcast.up, PI = TRUE, series = "increase") +
autolayer(fcast.down, PI = TRUE, series = "deccrease") +
guides(colour = guide_legend(title = "Scenario"))
fit.cons <- tslm(Consumption ~ Income, data = uschange)
h <- 4
fcast.ave <- forecast(fit.cons,
newdata = data.frame(
Income = rep(mean(uschange[,"Income"]), h)))
fcast.up <- forecast(fit.cons,
newdata = data.frame(Income = rep(5, h)))
autoplot(uschange[, "Consumption"]) +
ylab("% change in US consumption") +
autolayer(fcast.ave, series = "Average increase",
PI = TRUE) +
autolayer(fcast.up, series = "Extreme increase",
PI = TRUE) +
guides(colour = guide_legend(title = "Scenario"))
autoplot(mens400) +
xlab("Year") + ylab("Time(in minutes)")
tslm(mens400 ~ trend)
checkresiduals(tslm(mens400 ~ trend))
fit.mens = tslm(mens400 ~ trend)
forecast(fit.mens, h = 4)
autoplot(fancy)
autoplot(fancy) +
xlab("Years") + ylab("Sales")
fit.fancy = tslm(fancy ~ trend +season)
fit.fancy = tslm(fancy ~ trend +season, lambda = 0)
summary(fit.fancy)
checkresiduals(fit.fancy)
?cycle
cycle(fancy)
a = rep(0, length(fancy))
a
a[cycle(fancy) == 3] = 1
a
surf_dummy = rep(0, length(fancy))
surf_dummy[cycle(fancy) == 3] = 1
fit.fancy = tslm(fancy ~ trend + season + surf_dummy, lambda = 0)
summary(fit.fancy)
class(a)
length(fancy)
as.ts(a)
surf_dummy = rep(0, length(fancy))
surf_dummy[cycle(fancy) == 3] = 1
fit.fancy = tslm(fancy ~ trend + season + as.ts(surf_dummy), lambda = 0)
summary(fit.fancy)
surf_dummy = rep(0, length(fancy))
surf_dummy[cycle(fancy) == 3] = 1
fit.fancy = tslm(fancy ~ trend + season + as.factor(surf_dummy), lambda = 0)
summary(fit.fancy)
surf_dummy = rep(0, length(fancy))
surf_dummy[cycle(fancy) == 3] = 1
fit.fancy = tslm(fancy ~ trend + season + surf_dummy, lambda = 0)
summary(fit.fancy)
as.factor(a)
surf_dummy = as.ts(rep(0, length(fancy)))
surf_dummy[cycle(fancy) == 3] = 1
fit.fancy = tslm(fancy ~ trend + season + surf_dummy, lambda = 0)
summary(fit.fancy)
surf_dummy = as.factor(rep(0, length(fancy)))
surf_dummy[cycle(fancy) == 3] = 1
fit.fancy = tslm(fancy ~ trend + season + surf_dummy, lambda = 0)
surf_dummy = rep(0, length(fancy))
surf_dummy[cycle(fancy) == 3] = 1
surf_dummy = as.factor(surf_dummy)
fit.fancy = tslm(fancy ~ trend + season + surf_dummy, lambda = 0)
summary(fit.fancy)
surf_dummy = rep(0, length(fancy))
surf_dummy[cycle(fancy) == 3] = 1
surf_dummy = as.factor(surf_dummy)
fit.fancy = tslm(fancy ~ surf_dummy + trend + season, lambda = 0)
summary(fit.fancy)
cycle(fancy)
cycle[fancy][1]
cycle(fancy)[1]
cycle(fancy)[1:]
cycle(fancy)[,1]
cycle(fancy)[:1]
time(fancy)
fancy[time(fancy) == 1987]
fancy
fancy[floor(time(fancy)) == 1987]
surf_dummy = rep(0, length(fancy))
surf_dummy[cycle(fancy) == 3 && floor(time(fancy)) != 1987] = 1
surf_dummy = as.factor(surf_dummy)
fit.fancy = tslm(fancy ~ surf_dummy + trend + season, lambda = 0)
surf_dummy = rep(0, length(fancy))
surf_dummy[cycle(fancy) == 3 && floor(time(fancy)) != 1987] = 1
fit.fancy = tslm(fancy ~ surf_dummy + trend + season, lambda = 0)
summary(fit.fancy)
surf_dummy
surf_dummy = rep(0, length(fancy))
surf_dummy[cycle(fancy) == 3] = 1
surf_dummy[floor(time(fancy)) == 1987] = 0
fit.fancy = tslm(fancy ~ surf_dummy + trend + season, lambda = 0)
summary(fit.fancy)
surf_dummy = rep(0, length(fancy))
surf_dummy[cycle(fancy) == 3] = 1
surf_dummy[floor(time(fancy)) == 1987] = 0
fit.fancy = tslm(fancy ~ trend + season + surf_dummy, lambda = 0)
summary(fit.fancy)
checkresiduals(fit.fancy)
boxplot(fit.fancy ~ cycle(fancy))
ggplot(aes(x = cycle(fancy), y = residuals(fit.fancy))) +
geom_boxplot()
residuals(fit.fancy) %>%
as.data.frame() %>%
ggplot(aes(x = cycle(fancy), y = residuals(fit.fancy))) +
geom_boxplot()
residuals(fit.fancy)
cycle(fancy)
data.frame(residual = residuals(fit.fancy), month = cycle(fancy))
data.frame(residuals = residuals(fit.fancy),Month = cycle(fancy)) %>%
ggplot(aes(x = Month, y = residuals)) +
geom_boxplot()
data.frame(residuals = residuals(fit.fancy),Month = cycle(fancy)) %>%
ggplot(aes(x = Month, y = residuals, group = Month)) +
geom_boxplot()
autoplot(fancy/monthdays(fancy)) +
xlab("Years") + ylab("Sales")
autoplot(log(fancy/monthdays(fancy))) +
xlab("Years") + ylab("Sales")
?ts
new_data = rep(0,36)
new_data = ts(data = new_data, start = 1994, end = c(1996,12), frequency = 12)
new_data = rep(0,36)
new_data = ts(data = new_data, start = 1994, end = c(1996,12), frequency = 12)
new_data[cycle(new_data) == 3] = 1
new_data
new_data = rep(0,36)
new_data = ts(data = new_data, start = 1994, end = c(1996,12), frequency = 12)
new_data[cycle(new_data) == 3] = 1
forecast(fit.fancy, newdata = new_data)
new_data = rep(0,36)
new_data = ts(data = new_data, start = 1994, end = c(1996,12), frequency = 12)
new_data[cycle(new_data) == 3] = 1
forecast(fit.fancy, newdata = data.frame(surf_dummy = new_data))
?huron
autoplot(huron)
autoplot(huron)
t = time(huron)
tb1 = ts(pmax(0,t - 1915), start = 1875)
t = time(huron)
tb1 = ts(pmax(0,t - 1915), start = 1875)
fit.huron = tslm(huron ~ t + tb1)
t = time(huron)
tb1 = ts(pmax(0,t - 1915), start = 1875)
fit.huron = tslm(huron ~ t + tb1)
summary(fit.huron)
ts(pmax(0,t - 1915), start = 1875)
autoplot(huron) +
autolayer(fitted(fit.huron), series = "Fitted")
