ggtitle("Forecasts from Holt's method") +
guides(colour = guide_legend(title = "Forecasts"))
autoplot(livestock) +
xlab("year") + ggtitle("Livestock, sheep in Asia (millions)")
e1 = tsCV(livestock, ses, h = 1)
e2 = tsCV(livestock, holt, h = 1)
e3 = tsCV(livestock, holt, damped = TRUE, h = 1)
print ("Compare MSE")
print(c('CV error from SES :-', mean(e1^2, na.rm = TRUE)))
print(c('CV error from Holt :-', mean(e2^2, na.rm = TRUE)))
print(c('CV error from Damped Holt :-', mean(e3^2, na.rm = TRUE)))
print ("Compare MAE")
print(c('CV error from SES :-', mean(abs(e1), na.rm = TRUE)))
print(c('CV error from Holt :-', mean(abs(e2), na.rm = TRUE)))
print(c('CV error from Damped Holt :-', mean(abs(e3), na.rm = TRUE)))
fc = holt(livestock, damped = TRUE)
fc[["model"]]
autoplot(fc) +
xlab("Year") + ggtitle("Livestock, sheep in Asia (millions)")
aust = window(austourists, start = 2005)
fit1 = hw(aust, seasonal = "additive")
fit2 = hw(aust, seasonal = "multiplicative")
autoplot(aust) +
autolayer(fit1, series = "HW additive forecasts", PI = FALSE) +
autolayer(fit2, series = "HW multiplicative forecasts", PI = FALSE) +
xlab("Year") + ylab("Visitor Nights (millions)") +
ggtitle("International visitor nights in Australia") +
guides(colour = guide_legend(title = "Forecasts"))
fit1[["model"]]
fit2[["model"]]
fc = hw(subset(hyndsight, end = length(hyndsight)-35),
damped = TRUE, seasonal = "multiplicative", h = 35)
autoplot(hyndsight) +
autolayer(fc, series = "HW multi damped", PI = FALSE) +
guides(colour = guide_legend(title = "Forecasts"))
knitr::opts_chunk$set(echo = TRUE)
aust = window(austourists, start = 2006)
fit = ets(aust)
summary(fit)
library(fpp2)
aust = window(austourists, start = 2006)
fit = ets(aust)
summary(fit)
autoplot(fit)
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
oildata <- window(oil, start = 1996)
autoplot(oildata) +
xlab("Year") + ylab("Oil(million of tonnes)")
oildata = window(oil,start = 1996)
fc = ses(oildata,h =5)
fc$model
autoplot(fc) +
autolayer(fitted(fc), series = "Fitted") +
xlab("Year") + ylab("Oil(million of tonnes)")
fc
autoplot(pigs)
pigs_forc = ses(pigs, h = 4)
pigs_forc$model
pigs_forc
#Manually
print("lower limit")
pigs_forc$mean[1] - 1.96 * sd(residuals(pigs_forc))
print("upper limit")
pigs_forc$mean[1] + 1.96 * sd(residuals(pigs_forc))
Ses_f <- function(y, alpha, level){
forc = (1-alpha)^(length(pigs)) * level
for (i in (length(pigs)-1):0) {
forc = forc + alpha*(1-alpha)^i * pigs[length(pigs)-i]
}
return(forc)
}
# Check if the function gives the same result as the ses function.
Ses_f(pigs, 0.2971, 77260.0561)
?vector
fc$fitted
Ses_err <- function(y, alpha, level){
pred = vector(length = length(pigs))
pred[1] = (1-alpha)^(length(pigs)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(pigs)) {
pred[i] = alpha * pigs[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (pigs[i] - pred[i])^2
}
return(SSE)
}
?optim
Ses_err <- function(y, alpha, level){
pred = vector(length = length(pigs))
pred[1] = (1-alpha)^(length(pigs)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(pigs)) {
pred[i] = alpha * pigs[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (pigs[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), Ses_err)
Ses_err <- function(c(alpha,level),y){
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(pigs))
pred[1] = (1-alpha)^(length(pigs)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(pigs)) {
pred[i] = alpha * pigs[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (pigs[i] - pred[i])^2
}
return(SSE)
}
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(pigs))
pred[1] = (1-alpha)^(length(pigs)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(pigs)) {
pred[i] = alpha * pigs[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (pigs[i] - pred[i])^2
}
return(SSE)
}
Ses_err(c(0.2971,77260.0561),pigs)
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(pigs))
pred[1] = (1-alpha)^(length(pigs)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(pigs)) {
pred[i] = alpha * pigs[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (pigs[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), Ses_err(y = pigs))
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(pigs))
pred[1] = (1-alpha)^(length(pigs)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(pigs)) {
pred[i] = alpha * pigs[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (pigs[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), Ses_err(,y = pigs))
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(pigs))
pred[1] = (1-alpha)^(length(pigs)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(pigs)) {
pred[i] = alpha * pigs[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (pigs[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), Ses_err(param = c(1,1),y = pigs))
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(pigs))
pred[1] = (1-alpha)^(length(pigs)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(pigs)) {
pred[i] = alpha * pigs[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (pigs[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), fn = Ses_err(y = pigs))
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(pigs))
pred[1] = (1-alpha)^(length(pigs)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(pigs)) {
pred[i] = alpha * pigs[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (pigs[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), fn = Ses_err(param = c(1,1),y = pigs))
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(pigs))
pred[1] = (1-alpha)^(length(pigs)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(pigs)) {
pred[i] = alpha * pigs[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (pigs[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), fn = Ses_err)
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(y))
pred[1] = (1-alpha)^(length(y)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(y)) {
pred[i] = alpha * y[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (y[i] - pred[i])^2
}
return(SSE)
}
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(y))
pred[1] = (1-alpha)^(length(y)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(y)) {
pred[i] = alpha * y[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (y[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), fn= Ses_err
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(y))
pred[1] = (1-alpha)^(length(y)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(y)) {
pred[i] = alpha * y[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (y[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), fn= Ses_err)
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(y))
pred[1] = (1-alpha)^(length(y)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(y)) {
pred[i] = alpha * y[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (y[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), fn= Ses_err(y = pigs))
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(y))
pred[1] = (1-alpha)^(length(y)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(y)) {
pred[i] = alpha * y[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (y[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), fn = Ses_err)
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(y))
pred[1] = (1-alpha)^(length(y)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(y)) {
pred[i] = alpha * y[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (y[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,1), fn = Ses_err, y= pigs)
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(y))
pred[1] = (1-alpha)^(length(y)) * level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(y)) {
pred[i] = alpha * y[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (y[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,pigs[1]), fn = Ses_err, y= pigs)
Ses_err <- function(param,y){
alpha = param[1]
level = param[2]
pred = vector(length = length(y))
pred[1] = level
SSE = (pigs[1] - pred[1])^2
for (i in 2:length(y)) {
pred[i] = alpha * y[i-1] + (1 - alpha) * pred[i-1]
SSE = SSE + (y[i] - pred[i])^2
}
return(SSE)
}
optim(c(1,pigs[1]), fn = Ses_err, y= pigs)
optim(c(1,pigs[1]), fn = Ses_err, y= pigs)$par
function(data){
param = optim(c(1,data[1]), fn = Ses_err, y= data)$par
forecast = Ses_f(pigs, param[1], param[2])
forc = list(param[1], param[2], forecast)
names(forc) <- c("alpha", "level", "1st forecast")
}
function(data){
param = optim(c(1,data[1]), fn = Ses_err, y= data)$par
forecast = Ses_f(pigs, param[1], param[2])
forc = list(param[1], param[2], forecast)
names(forc) <- c("alpha", "level", "1st forecast")
return(forc)
}
SES <- function(data){
param = optim(c(1,data[1]), fn = Ses_err, y= data)$par
forecast = Ses_f(data, param[1], param[2])
forc = list(param[1], param[2], forecast)
names(forc) <- c("alpha", "level", "1st forecast")
return(forc)
}
SES(pigs)
#Manually
print("lower limit",pigs_forc$mean[1] - 1.96 * sd(residuals(pigs_forc)))
#Manually
print("lower limit" & pigs_forc$mean[1] - 1.96 * sd(residuals(pigs_forc)))
#Manually
print("lower limit" , pigs_forc$mean[1] - 1.96 * sd(residuals(pigs_forc)))
#Manually
print(c("lower limit" , pigs_forc$mean[1] - 1.96 * sd(residuals(pigs_forc))))
print("upper limit")
pigs_forc$mean[1] + 1.96 * sd(residuals(pigs_forc))
#Manually
print(c("lower limit" , pigs_forc$mean[1] - 1.96 * sd(residuals(pigs_forc))))
print(c("upper limit",pigs_forc$mean[1] + 1.96 * sd(residuals(pigs_forc))))
fc$fitted
fc
names(fc)
fc$x
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
autoplot(window(ausair, start = 1990)) +
xlab("Year") + ylab("")
air = window(ausair, start = 1990)
fc = holt(air, h = 5)
fc$model
fc = holt(air,h =15)
fc2 = holt(air, damped = TRUE, phi = 0.9, h = 15)
autoplot(air) +
autolayer(fc, series = "Holt's Method", PI = FALSE) +
autolayer(fc2, series = "Damped Holt's Method", PI = FALSE) +
xlab("Year") + ylab("Air passengers in Australia (millions)") +
ggtitle("Forecasts from Holt's method") +
guides(colour = guide_legend(title = "Forecasts"))
autoplot(livestock) +
xlab("year") + ggtitle("Livestock, sheep in Asia (millions)")
e1 = tsCV(livestock, ses, h = 1)
e2 = tsCV(livestock, holt, h = 1)
e3 = tsCV(livestock, holt, damped = TRUE, h = 1)
print ("Compare MSE")
print(c('CV error from SES :-', mean(e1^2, na.rm = TRUE)))
print(c('CV error from Holt :-', mean(e2^2, na.rm = TRUE)))
print(c('CV error from Damped Holt :-', mean(e3^2, na.rm = TRUE)))
print ("Compare MAE")
print(c('CV error from SES :-', mean(abs(e1), na.rm = TRUE)))
print(c('CV error from Holt :-', mean(abs(e2), na.rm = TRUE)))
print(c('CV error from Damped Holt :-', mean(abs(e3), na.rm = TRUE)))
fc = holt(livestock, damped = TRUE)
fc[["model"]]
autoplot(fc) +
xlab("Year") + ggtitle("Livestock, sheep in Asia (millions)")
aust = window(austourists, start = 2005)
fit1 = hw(aust, seasonal = "additive")
fit2 = hw(aust, seasonal = "multiplicative")
autoplot(aust) +
autolayer(fit1, series = "HW additive forecasts", PI = FALSE) +
autolayer(fit2, series = "HW multiplicative forecasts", PI = FALSE) +
xlab("Year") + ylab("Visitor Nights (millions)") +
ggtitle("International visitor nights in Australia") +
guides(colour = guide_legend(title = "Forecasts"))
fit1[["model"]]
fit2[["model"]]
fc = hw(subset(hyndsight, end = length(hyndsight)-35),
damped = TRUE, seasonal = "multiplicative", h = 35)
autoplot(hyndsight) +
autolayer(fc, series = "HW multi damped", PI = FALSE) +
guides(colour = guide_legend(title = "Forecasts"))
holtfc_pb = holt(books[,1], h = 4)
autoplot(holtfc_pb) +
autolayer(fitted(holtfc_pb), series = "Fitted") +
xlab("Day") +
ylab("No. of books")
holtfc_pb$model
print(c("RMSE",sqrt(mean((books[,1] - fitted(holtfc_pb))^2))))
holtfc_hc = holt(books[,2], h = 4)
autoplot(holtfc_hc) +
autolayer(fitted(holtfc_hc), series = "Fitted") +
xlab("Day") +
ylab("No. of books")
holtfc_hc$model
print(c("RMSE",sqrt(mean((books[,2] - fitted(holtfc_hc))^2))))
print(c("lower limit" , holtfc_pb$mean[1] - 1.96 * sd(residuals(holtfc_pb))))
print(c("upper limit",holtfc_pb$mean[1] + 1.96 * sd(residuals(holtfc_pb))))
autoplot(eggs)
autoplot(eggs) +
xlab("Year")
autoplot(eggs) +
xlab("Year") + ylab("")
?eggs
autoplot(eggs) +
xlab("Year") + ylab("") + ggtitle("Price of dozen eggs in US")
?holt
eggs_fc = holt(eggs, h = 100)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 50)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 50, damped = TRUE)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 5, damped = TRUE)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 50, damped = TRUE)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc
eggs_fc$model
eggs_fc = holt(eggs, h = 50, damped = TRUE, phi = 0.9)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 50, damped = TRUE, phi = 0.95)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 50, damped = TRUE, phi = 0.99)
eggs_fc = holt(eggs, h = 50, damped = TRUE, phi = 0.96)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 50, damped = TRUE, phi = 0.8)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 50, damped = TRUE, phi = 0.85)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 5, damped = TRUE, phi = 0.85)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 10, damped = TRUE, phi = 0.85)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 10, damped = TRUE, phi = 0.9)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 10, damped = TRUE, phi = 0.9, lambda = BoxCox.lambda(eggs))
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 10, lambda = BoxCox.lambda(eggs))
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 10, lambda = BoxCox.lambda(eggs), damped = TRUE)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
eggs_fc = holt(eggs, h = 10, lambda = BoxCox.lambda(eggs), damped = TRUE)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
accuracy(eggs_fc)
eggs_fc = holt(eggs, h = 50)
autoplot(eggs_fc) +
autolayer(fitted(eggs_fc), series = "Fitted Values") +
xlab("Year") + ylab("") +
ggtitle("Price of dozen eggs in US")
accuracy(eggs_fc)
