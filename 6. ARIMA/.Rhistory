retaildata = readxl::read_excel("/Users/atyagi/Desktop/Time Series Forecasting/Time-Series-Forecasting/Time_series_data/retail.xlsx",skip =1)
myts = ts(retaildata[,"A3349873A"], start = c(1984,4), frequency = 12)
autoplot(myts)
retaildata = readxl::read_excel("/Users/atyagi/Desktop/Time Series Forecasting/Time-Series-Forecasting/Time_series_data/retail.xlsx",skip =1)
myts = ts(retaildata[,"A3349873A"], start = c(1984,4), frequency = 12)
autoplot(myts)
retaildata = readxl::read_excel("/Users/atyagi/Desktop/Time Series Forecasting/Time-Series-Forecasting/Time_series_data/retail.xlsx",skip =1)
myts = ts(retaildata[,"A3349873A"], start = c(1984,4), frequency = 12)
autoplot(myts)
myts %>% BoxCox(lambda = BoxCox.lambda(myts)) %>% autoplot()
myts %>% BoxCox(lambda = BoxCox.lambda(myts)) %>% diff(12) %>% autoplot()
myts %>% BoxCox(lambda = BoxCox.lambda(myts)) %>% diff(12) %>% nsdiffs()
myts %>% BoxCox(lambda = BoxCox.lambda(myts)) %>% diff(12) %>% ndiffs()
myts %>% BoxCox(lambda = BoxCox.lambda(myts)) %>% diff(12) %>% diff()
myts %>% BoxCox(lambda = BoxCox.lambda(myts)) %>% diff(12) %>% diff() %>% autoplot()
myts %>% BoxCox(lambda = BoxCox.lambda(myts)) %>% diff(12) %>% diff() %>% ur.kpss()
myts %>% BoxCox(lambda = BoxCox.lambda(myts)) %>% diff(12) %>% diff() %>%
ur.kpss() %>% summary()
myts %>% BoxCox(lambda = BoxCox.lambda(myts)) %>% diff(12) %>% diff() %>%
ur.kpss() %>% summary()
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
autoplot(uschange[,"Consumption"]) +
xlab("Year") + ylab("Quarterly percentage change")
fit = auto.arima(uschange[,"Consumption"], seasonal = FALSE)
summary(fit)
fit %>% forecast(h = 10) %>% autoplot(include = 80)
ggAcf(uschange[,"Consumption"], main = "")
ggPacf(uschange[,"Consumption"], main = "")
fit2 = Arima(uschange[,"Consumption"], order = c(3,0,0))
summary(fit2)
fit3 = auto.arima(uschange[,"Consumption"], seasonal = FALSE, stepwise = FALSE, approximation = FALSE)
summary(fit3)
elecequip %>% stl(s.window = "periodic") %>% seasadj() -> eeadj
autoplot(eeadj)
eeadj %>% diff() %>% ggtsdisplay(main = "")
fit = Arima(eeadj, order = c(3,1,0))
summary(fit)
fit_2 = Arima(eeadj, order = c(3,1,1))
summary(fit_2)
checkresiduals(fit_2)
autoplot(forecast(fit_2))
autoplot(fit_2)
y = ts(numeric(100))
y = ts(numeric(100))
e = rnorm(100)
for(i in 2:100)
y[i] = 0.6*y[i-1] + e[i]
y = ts(numeric(100))
e = rnorm(100)
for(i in 2:100)
y[i] = 0.6*y[i-1] + e[i]
autoplot(y)
1:5 + 1:3   # prints and gives a warning
stop("foo")
con <- file("test.log")
sink(con, append=TRUE)
sink(con, append=TRUE, type="message")
# This will echo all input and not truncate 150+ character lines...
source("script.R", echo=TRUE, max.deparse.length=10000)
# Restore output to console
sink()
sink(type="message")
# And look at the log...
cat(readLines("test.log"), sep="\n")
sink("test.log", type = c("output","message"))
a <- "a"
a
ar1generator = function(phi){
y = ts(numeric(100))
e = rnorm(100)
for(i in 2:100)
y[i] = phi*y[i-1] + e[i]
return(y)
}
autoplot(ar1generator(0.3), series = "0.3") +
autolayer(ar1generator(0.6), series = "0.6") +
autolayer(ar1generator(0.9), series = "0.9") +
ylab("AR(1) Models") +
guides(colour = guide_legend(title = "Phi1"))
ma1_generator = function(theta){
y = ts(numeric(100))
e = rnorm(100)
for(i in 2:100)
y[i] = theta * e[i-1] + e[i]
return(y)
}
autoplot(ma1_generator(0.3), series = "0.3") +
autolayer(ma1_generator(0.6), series = "0.6") +
autolayer(ma1_generator(0.9), series = "0.9") +
ylab("MA(1) Models") +
guides(colour = guide_legend(title = "theta1"))
arima_101 = ts(numeric(50))
e = rnorm(50)
for(i in 2:50)
arima_101[i] = 0.6*arima_101[i-1] + 0.6*e[i-1] + e[i]
autoplot(arima_101)
arima_101 = ts(numeric(50))
e = rnorm(50)
for(i in 2:50)
arima_101[i] = 0.9*arima_101[i-1] + 0.6*e[i-1] + e[i]
autoplot(arima_101)
arima_101 = ts(numeric(50))
e = rnorm(50)
for(i in 2:50)
arima_101[i] = 0.6*arima_101[i-1] + 0.6*e[i-1] + e[i]
autoplot(arima_101)
arima_101 = ts(numeric(50))
e = rnorm(50)
for(i in 2:50)
arima_101[i] = 0.6*arima_101[i-1] + 0.9*e[i-1] + e[i]
autoplot(arima_101)
arima_101 = ts(numeric(50))
e = rnorm(50)
for(i in 2:50)
arima_101[i] = 0.6*arima_101[i-1] + 0.6*e[i-1] + e[i]
autoplot(arima_101)
arima_101 = ts(numeric(50))
e = rnorm(50)
for(i in 2:50)
arima_101[i] = 0.6*arima_101[i-1] + 0.9*e[i-1] + e[i]
autoplot(arima_101)
?file
arima_101 = ts(numeric(50))
e = rnorm(50)
for(i in 2:50)
arima_101[i] = 0.6*arima_101[i-1] + 0.6*e[i-1] + e[i]
autoplot(arima_101)
ar2_generator = ts(numeric(100))
e = rnorm(100)
for(i in 2:100)
ar2_generator[i] = -0.8*ar2_generator[i-1] + 0.3*ar2_generator[i-2] + e[i]
ar2_generator = ts(numeric(100))
e = rnorm(100)
for(i in 3:100)
ar2_generator[i] = -0.8 * ar2_generator[i-1] + 0.3 * ar2_generator[i-2] + e[i]
autoplot(ar2_generator)
autoplot(arima_101, series = "ARMA(1, 1)") +
autolayer(ar2_generator, series = "AR(2)") +
ylab("y") +
guides(colour = guide_legend(title = "Models"))
autoplot(arima_101, series = "ARMA(1, 1)") +
autolayer(ar2_generator, series = "AR(2)") +
ylab("y") +
guides(colour = guide_legend(title = "Models"))
autoplot(arima_101)
autoplot(wmurders)
autoplot(wmurders) +
ylab("No. of murders") + ggtitle("No. of women murders data")
wmurders %>% diff() %>% autoplot()
?wmurders
wmurders %>% diff() %>% ggtsdisplay()
wmurders %>% BoxCox(lambda = BoxCox.lambda(wmurders)) %>% diff() %>% ggtsdisplay()
# wmurders %>% BoxCox(lambda = BoxCox.lambda(wmurders)) %>% diff() %>% ggtsdisplay()
wmurders %>% diff() %>% ggtsdisplay()
wmurders %>% BoxCox(lambda = BoxCox.lambda(wmurders)) %>% diff() %>% ggtsdisplay()
# wmurders %>% diff() %>% ggtsdisplay()
# wmurders %>% BoxCox(lambda = BoxCox.lambda(wmurders)) %>% diff() %>% ggtsdisplay()
wmurders %>% diff() %>% ggtsdisplay()
ndiffs(wmurders)
autoplot(diff(wmurders, differences = 2))
ndiffs(wmurders)
ndiffs(wmurders)
library(urca)
wmurders %>% diff(differences = 2) %>% ur.kpss() %>% summary()
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
autoplot(uschange[,"Consumption"]) +
xlab("Year") + ylab("Quarterly percentage change")
fit = auto.arima(uschange[,"Consumption"], seasonal = FALSE)
summary(fit)
fit %>% forecast(h = 10) %>% autoplot(include = 80)
ggAcf(uschange[,"Consumption"], main = "")
ggPacf(uschange[,"Consumption"], main = "")
fit2 = Arima(uschange[,"Consumption"], order = c(3,0,0))
summary(fit2)
fit3 = auto.arima(uschange[,"Consumption"], seasonal = FALSE, stepwise = FALSE, approximation = FALSE)
summary(fit3)
elecequip %>% stl(s.window = "periodic") %>% seasadj() -> eeadj
autoplot(eeadj)
eeadj %>% diff() %>% ggtsdisplay(main = "")
fit = Arima(eeadj, order = c(3,1,0))
summary(fit)
fit_2 = Arima(eeadj, order = c(3,1,1))
summary(fit_2)
checkresiduals(fit_2)
autoplot(forecast(fit_2))
autoplot(fit_2)
y = ts(numeric(100))
e = rnorm(100)
for(i in 2:100)
y[i] = 0.6*y[i-1] + e[i]
autoplot(y)
ar1generator = function(phi){
y = ts(numeric(100))
e = rnorm(100)
for(i in 2:100)
y[i] = phi*y[i-1] + e[i]
return(y)
}
autoplot(ar1generator(0.3), series = "0.3") +
autolayer(ar1generator(0.6), series = "0.6") +
autolayer(ar1generator(0.9), series = "0.9") +
ylab("AR(1) Models") +
guides(colour = guide_legend(title = "Phi1"))
ma1_generator = function(theta){
y = ts(numeric(100))
e = rnorm(100)
for(i in 2:100)
y[i] = theta * e[i-1] + e[i]
return(y)
}
autoplot(ma1_generator(0.3), series = "0.3") +
autolayer(ma1_generator(0.6), series = "0.6") +
autolayer(ma1_generator(0.9), series = "0.9") +
ylab("MA(1) Models") +
guides(colour = guide_legend(title = "theta1"))
arima_101 = ts(numeric(50))
e = rnorm(50)
for(i in 2:50)
arima_101[i] = 0.6*arima_101[i-1] + 0.6*e[i-1] + e[i]
autoplot(arima_101)
ar2_generator = ts(numeric(100))
e = rnorm(100)
for(i in 3:100)
ar2_generator[i] = -0.8 * ar2_generator[i-1] + 0.3 * ar2_generator[i-2] + e[i]
autoplot(ar2_generator)
autoplot(arima_101, series = "ARMA(1, 1)") +
autolayer(ar2_generator, series = "AR(2)") +
ylab("y") +
guides(colour = guide_legend(title = "Models"))
autoplot(arima_101)
autoplot(wmurders) +
ylab("No. of murders") + ggtitle("No. of women murders data")
# wmurders %>% BoxCox(lambda = BoxCox.lambda(wmurders)) %>% diff() %>% ggtsdisplay()
wmurders %>% diff() %>% ggtsdisplay()
ndiffs(wmurders)
autoplot(diff(wmurders, differences = 2))
library(urca)
wmurders %>% diff(differences = 2) %>% ur.kpss() %>% summary()
wmurders %>% diff(differences = 2) %>% ur.kpss() %>% summary()
closeAllConnections()
library(urca)
wmurders %>% diff(differences = 2) %>% ur.kpss() %>% summary()
ndiffs(wmurders)
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
autoplot(uschange[,"Consumption"]) +
xlab("Year") + ylab("Quarterly percentage change")
fit = auto.arima(uschange[,"Consumption"], seasonal = FALSE)
summary(fit)
fit %>% forecast(h = 10) %>% autoplot(include = 80)
ggAcf(uschange[,"Consumption"], main = "")
ggPacf(uschange[,"Consumption"], main = "")
fit2 = Arima(uschange[,"Consumption"], order = c(3,0,0))
summary(fit2)
fit3 = auto.arima(uschange[,"Consumption"], seasonal = FALSE, stepwise = FALSE, approximation = FALSE)
summary(fit3)
elecequip %>% stl(s.window = "periodic") %>% seasadj() -> eeadj
autoplot(eeadj)
eeadj %>% diff() %>% ggtsdisplay(main = "")
fit = Arima(eeadj, order = c(3,1,0))
summary(fit)
fit_2 = Arima(eeadj, order = c(3,1,1))
summary(fit_2)
checkresiduals(fit_2)
autoplot(forecast(fit_2))
autoplot(fit_2)
y = ts(numeric(100))
e = rnorm(100)
for(i in 2:100)
y[i] = 0.6*y[i-1] + e[i]
autoplot(y)
ar1generator = function(phi){
y = ts(numeric(100))
e = rnorm(100)
for(i in 2:100)
y[i] = phi*y[i-1] + e[i]
return(y)
}
autoplot(ar1generator(0.3), series = "0.3") +
autolayer(ar1generator(0.6), series = "0.6") +
autolayer(ar1generator(0.9), series = "0.9") +
ylab("AR(1) Models") +
guides(colour = guide_legend(title = "Phi1"))
ma1_generator = function(theta){
y = ts(numeric(100))
e = rnorm(100)
for(i in 2:100)
y[i] = theta * e[i-1] + e[i]
return(y)
}
autoplot(ma1_generator(0.3), series = "0.3") +
autolayer(ma1_generator(0.6), series = "0.6") +
autolayer(ma1_generator(0.9), series = "0.9") +
ylab("MA(1) Models") +
guides(colour = guide_legend(title = "theta1"))
arima_101 = ts(numeric(50))
e = rnorm(50)
for(i in 2:50)
arima_101[i] = 0.6*arima_101[i-1] + 0.6*e[i-1] + e[i]
autoplot(arima_101)
ar2_generator = ts(numeric(100))
e = rnorm(100)
for(i in 3:100)
ar2_generator[i] = -0.8 * ar2_generator[i-1] + 0.3 * ar2_generator[i-2] + e[i]
autoplot(ar2_generator)
autoplot(arima_101, series = "ARMA(1, 1)") +
autolayer(ar2_generator, series = "AR(2)") +
ylab("y") +
guides(colour = guide_legend(title = "Models"))
autoplot(arima_101)
autoplot(wmurders) +
ylab("No. of murders") + ggtitle("No. of women murders data")
# wmurders %>% BoxCox(lambda = BoxCox.lambda(wmurders)) %>% diff() %>% ggtsdisplay()
wmurders %>% diff() %>% ggtsdisplay()
ndiffs(wmurders)
autoplot(diff(wmurders, differences = 2))
library(urca)
wmurders %>% diff(differences = 2) %>% ur.kpss() %>% summary()
wmurders %>% diff(differences = 2) %>% ggtsdisplay(main = "")
wmurders_arima_120 = Arima(wmurders, order = c(1,2,0))
summary(wmurders_arima_120)
wmurders_arima_022 = Arima(wmurders, order = c(0,2,2))
summary(wmurders_arima_022)
checkresiduals(wmurders_arima_022)
checkresiduals(wmurders_arima_022)
Pacf(wmurders_arima_022)
checkresiduals(wmurders_arima_022)
Pacf(residuals(wmurders_arima_022))
auto.arima(wmurders, seasonal = FALSE, stepwise = FALSE, approximation = FALSE)
auto.arima(wmurders, seasonal = FALSE)
auto.arima(wmurders, seasonal = FALSE, stepwise = FALSE, approximation = FALSE)
years = length(wmurders)
e = residuals(wmurders_arima_022)
years = length(wmurders)
e = residuals(wmurders_arima_022)
fc1 = 2*wmurders[years] - wmurders[years-1] + -1.0181 * e[years] + 0.1470 * e[years-1]
fc2 = 2*fc1 - wmurders[years] + 0.1470 * e[years]
fc3 = 2*fc2 - fc1
years = length(wmurders)
e = residuals(wmurders_arima_022)
fc1 = 2*wmurders[years] - wmurders[years-1] + -1.0181 * e[years] + 0.1470 * e[years-1]
fc2 = 2*fc1 - wmurders[years] + 0.1470 * e[years]
fc3 = 2*fc2 - fc1
c(fc1, fc2, fc3)
forecast(wmurders_arima_022, h = 3)
forecast(wmurders_arima_022, h = 3) %>% autoplot()
autoplot(austa)
autoplot(austa) +
xlab("Year") + ylab("No. of visitors")
autoplot(austa) +
xlab("Year") + ylab("No. of visitors") +
ggtitle("Total international visitors to Australia")
auto.arima(austa)
austa.arima = auto.arima(austa)
autoplot(forecast(austa.arima, h = 10))
austa.arima = auto.arima(austa)
autoplot(forecast(austa.arima, h = 10))
austa.arima = auto.arima(austa)
summary(austa.arima)
autoplot(forecast(austa.arima, h = 10))
checkresiduals(austa.arima)
austa.arima_011 = Arima(austa, order= c(0,1,1))
autoplot(forecast(austa.arima_011 , h = 10))
austa.arima_010 = Arima(austa, order= c(0,1,0))
autoplot(forecast(austa.arima_010 , h = 10))
austa.arima_213 = Arima(austa, order= c(2,1,3))
austa.arima_213 = Arima(austa, order= c(2,1,3), include.drift = TRUE)
autoplot(forecast(austa.arima_213 , h = 10))
forecast(austa.arima_213)$mean
austa.arima_001 = Arima(austa, order= c(0,0,1), include.drift = TRUE)
autoplot(forecast(austa.arima_001 , h = 10))
forecast(austa.arima_001)$mean
austa.arima_001 = Arima(austa, order= c(0,0,1), include.constant = TRUE)
autoplot(forecast(austa.arima_001 , h = 10))
austa.arima_001 = Arima(austa, order= c(0,0,0), include.constant = TRUE)
autoplot(forecast(austa.arima_001 , h = 10))
austa.arima_000 = Arima(austa, order= c(0,0,0), include.constant = TRUE)
autoplot(forecast(austa.arima_000 , h = 10))
austa.arima_021 = Arima(austa, order= c(0,2,1), include.constant = TRUE)
autoplot(forecast(austa.arima_021 , h = 10))
autoplot(usgdp) + xlab("Year")
autoplot(BoxCox(usgdp, lambda = BoxCox.lambda(usgdp))
autoplot(BoxCox(usgdp, lambda = BoxCox.lambda(usgdp)))
autoplot(BoxCox(usgdp, lambda = BoxCox.lambda(usgdp)))
lambda_usgdp = BoxCox.lambda(usgdp)
usgdp_arima = auto.arima(usgdp, lambda = lambda_usgdp)
summary(usgdp_arima)
ggtsdisplay(diff(BoxCox(usgdp, lambda = lambda_usgdp)))
Arima(usgdp, lambda = lambda_usgdp, order = c(1,1,0))
Arima(usgdp, lambda = lambda_usgdp, order = c(1,1,0), include.drift = TRUE)
usgdp_arima110 = Arima(usgdp, lambda = lambda_usgdp, order = c(1,1,0), include.drift = TRUE)
summary(usgdp_arima110)
usgdp_arima110 = Arima(usgdp, lambda = lambda_usgdp, order = c(1,1,0), include.drift = TRUE)
summary(usgdp_arima110)
checkresiduals(usgdp_arima110)
usgdp_arima012 = Arima(usgdp, lambda = lambda_usgdp, order = c(0,1,2), include.drift = TRUE)
summary(usgdp_arima012)
checkresiduals(usgdp_arima012)
checkresiduals(usgdp_arima)
ggPacf(residuals(usgdp_arima012))
checkresiduals(wmurders_arima_022)
ggPacf(residuals(wmurders_arima_022))
usgdp_arima012 = Arima(usgdp, lambda = lambda_usgdp, order = c(0,1,2), include.drift = TRUE)
summary(usgdp_arima012)
checkresiduals(usgdp_arima012)
ggPacf(residuals(usgdp_arima012))
accuracy(usgdp_arima012)
usgdp_ets = ets(usgdp)
summary(usgdp_ets)
autoplot(forecast(usgdp_ets, h = 5))
autoplot(forecast(usgdp_ets, h = 10))
autoplot(forecast(usgdp_ets, h = 10)) +
autolayer(forecast(usgdp_arima012, h = 10))
autoplot(forecast(usgdp_ets, h = 10), PI = FALSE) +
autolayer(forecast(usgdp_arima012, h = 10))
autoplot(forecast(usgdp_ets, h = 10), PI = FALSE) +
autolayer(forecast(usgdp_arima012, h = 10), PI = FALSE)
autoplot(forecast(usgdp_ets, h = 10), PI = FALSE, series = "ARIMA") +
autolayer(forecast(usgdp_arima012, h = 10), PI = FALSE, series = "ETS")
autoplot(forecast(usgdp_ets, h = 10), PI = FALSE, series = "ARIMA") +
autolayer(forecast(usgdp_arima012, h = 10), PI = FALSE, series = "ETS") +
guides(colour = guide_legend(title = "Forecast"))
autoplot(usgdp) +
autolayer(forecast(usgdp_arima012, h = 10), PI = FALSE, series = "ARIMA") +
autolayer(forecast(usgdp_ets, h = 10), PI = FALSE, series = "ETS") +
guides(colour = guide_legend(title = "Forecast"))
fets = function(x,h){
forecast(ets(x), h = h)
}
farima = function(x,h){
forecast(auto.arima(x), h = h)
}
#To compute the CV error
e1 = tsCV(usgdp, fets , h = 1)
e2 = tsCV(usgdp, farima , h = 1)
mean(e1^2, na.rm = TRUE)
mean(e2^2, na.rm = TRUE)
knitr::opts_chunk$set(echo = TRUE)
autoplot(austourists) + xlab("Years")
cbind("No. of tourists" = austourists,
"No. of tourists(log)" = log(austourists)) %>%
autoplot(facets = TRUE) + xlab("Years")
cbind("No. of tourists" = austourists,
"No. of tourists(log)" = BoxCox(austourists, lambda = BoxCox.lambda(austourists))) %>%
autoplot(facets = TRUE) + xlab("Years")
ggAcf(austourists)
ggPacf(austourists)
austourists %>% diff(lag = 12) %>% ggtsdisplay()
nsdiffs(austourists)
austourists %>% diff(lag = 4) %>% ggtsdisplay()
diff(lag = 4) %>% ndiffs()
austourists %>% diff(lag = 4) %>% ndiffs()
Arima(austourists, order = c(1,0,0), seasonal = c(1,1,0))
aust_arima = Arima(austourists, order = c(1,0,0), seasonal = c(1,1,0))
checkresiduals(aust_arima)
aust_arima = Arima(austourists, order = c(1,0,0), seasonal = c(1,1,0))
checkresiduals(aust_arima)
auto.arima(austourists, stepwise = FALSE, lambda = 0)
auto.arima(austourists, lambda = 0)
auto.arima(austourists, stepwise = FALSE)
aust_arima = Arima(austourists, order = c(1,0,0), seasonal = c(1,1,0), include.drift = TRUE)
checkresiduals(aust_arima)
aust_arima = Arima(austourists, order = c(1,0,0), seasonal = c(1,1,0))
checkresiduals(aust_arima)
aust_arima = Arima(austourists, order = c(1,0,0), seasonal = c(1,1,0))
checkresiduals(aust_arima)
ggPacf(aust_arima)
aust_arima = Arima(austourists, order = c(1,0,0), seasonal = c(1,1,0))
checkresiduals(aust_arima)
ggPacf(residuals(aust_arima))
aust_arima_drift = Arima(austourists, order = c(1,0,0), seasonal = c(1,1,0), include.drift = TRUE)
checkresiduals(aust_arima_drift)
autoplot(usmelec)
autoplot(ma(usmelec, order = 12, centre = TRUE))
autoplot(usmelec, series = "Data") +
autolayer(ma(usmelec, order = 12, centre = TRUE), series = "2-12 MA") +
xlab("Year")
autoplot(usmelec, series = "Data") +
autolayer(ma(usmelec, order = 12, centre = TRUE), series = "2-12 MA") +
xlab("Year")
autoplot(usmelec, series = "Data") +
autolayer(ma(usmelec, order = 12, centre = TRUE), series = "2-12 MA") +
xlab("Year") + ggtitle("Total net generation of electricity")
usmelec_lambda = BoxCox.lambda(usmelec)
autoplot(BoxCox(usmelec, lambda = usmelec_lambda))
usmelec %>% BoxCox(lambda = usmelec_lambda) %>% diff(lag = 12) %>% autoplot()
usmelec %>% BoxCox(lambda = usmelec_lambda) %>% diff(lag = 12) %>% nsdiffs()
usmelec %>% BoxCox(lambda = usmelec_lambda) %>% diff(lag = 12) %>% ndiffs()
usmelec %>% BoxCox(lambda = usmelec_lambda) %>% diff(lag = 12) %>% ggtsdisplay()
usmelec %>% BoxCox(lambda = usmelec_lambda) %>% diff(lag = 12) %>%
diff(lag = 1) %>%
ggtsdisplay()
usmelec_arima1 = Arima(usmelec, order = c(0,1,2), seasonal = c(0,1,1),
lambda = usmelec_lambda)
summary(usmelec_arima1)
usmelec_arima1 = Arima(usmelec, order = c(0,1,2), seasonal = c(0,1,1),
lambda = usmelec_lambda)
summary(usmelec_arima1)
ggtsdisplay(residuals(usmelec_arima1))
usmelec_arima1 = Arima(usmelec, order = c(0,1,2), seasonal = c(0,1,1),
lambda = usmelec_lambda, include.drift = TRUE)
summary(usmelec_arima1)
ggtsdisplay(residuals(usmelec_arima1))
usmelec_arima1 = Arima(usmelec, order = c(0,1,2), seasonal = c(0,1,1),
lambda = usmelec_lambda)
summary(usmelec_arima1)
ggtsdisplay(residuals(usmelec_arima1))
auto.arima(usmelec, lambda = usmelec_lambda)
auto.arima(usmelec, lambda = usmelec_lambda, stepwise = TRUE)
auto.arima(usmelec, lambda = usmelec_lambda, stepwise = FALSE)
